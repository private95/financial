package com.iparhan.financial.search.controller;

import java.util.List;


import org.apache.commons.lang.StringUtils;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.reflection.ExceptionUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.iparhan.financial.admin.entity.SearchResult;
import com.iparhan.financial.entity.Company;
import com.iparhan.financial.search.dao.CompanySearchDao;
import com.iparhan.financial.search.entity.CompanySearch;
import com.iparhan.financial.service.impl.CompanySearchService;
import com.iparhan.financial.until.CommonConstant;
import com.iparhan.financial.vo.CommonResponseVO;

/**
 * 理财百科首页搜索框的企业信息业务加上算法
 * 
 * @author Iparhan
 */
@CrossOrigin(origins = "*", maxAge = 3600) // 使用于前端的跨域
@RestController
public class CompanySearchController {

	@Autowired
	private CompanySearchDao companySearchDao;
	
	@Autowired
	private CompanySearchService companySearchService;

	/*
	 * 理财百科搜索业务
	 */
	@CrossOrigin(origins = "*", maxAge = 3600) // 使用于前端的跨域
	@RequestMapping(value = "/companySearch")
	public List<CompanySearch> conpanySearch(String name,String state) {
		System.out.println("前端传递的----" + name);

		/*
		 * 根据在理财百科首页搜索框用户输入的内容按照以下步骤进行查询算法 1.精确查询 2.一级模糊查询 模糊查询使用 like 而不是 = 3.二级模糊查询
		 * 4.三级多条件查询 多条件查询每个条件之间使用 or 来分开
		 */

		/*
		 * 备注： 1.try 里面根据不同的条件使用if来判别，最终哪个条件都不符合就执行catch语句
		 */
		List<CompanySearch> companySearchs = null;
		try {
			if(CommonConstant.STATE_0.equals(state)|| StringUtils.isBlank(state)) {
				companySearchs = companySearchDao.companySearchToMany(name);
			}else if(CommonConstant.STATE_1.equals(state)) {
				companySearchs = companySearchDao.companySearchLevelOne(name);
			}else {
				companySearchs = companySearchDao.companySearchsProduction(name);
			}
			
		} catch (Exception e) {
			e.printStackTrace();

		}
		return companySearchs; // 返回数据

	}

	/*
	 * 二级查询 模糊查询
	 */

	public List<CompanySearch> companySearchs(@Param("name") String name) {
		// 二级模糊查询
		List<CompanySearch> companySearchs = companySearchDao.companySearchLevelOne(name);
		System.out.println("搜索企业信息二级模糊查询-------------" + companySearchs);
		if (companySearchs != null && companySearchs.size() != 0 && !companySearchs.isEmpty()) {
			return companySearchs;
		} else {
			companySearchsPerson(name);

		}
		return companySearchsPerson(name);

	}

	/*
	 * 根据核心人物名称来查询
	 */
	public List<CompanySearch> companySearchsPerson(@Param("name") String name) {
		// 根据核心人物名称查询
		List<CompanySearch> companySearchs = companySearchDao.companySearchsPersonNormal(name);
		System.out.println("搜索企业信息根据核心人物名称查询-------------" + companySearchs);
		if (companySearchs != null && companySearchs.size() != 0 && !companySearchs.isEmpty()) {
			return companySearchs;
		} else {
			companySearchsAddress(name);
		}

		return companySearchsAddress(name);

	}

	/*
	 * 根据地址来查询 模糊查询
	 */
	public List<CompanySearch> companySearchsAddress(String name) {
		// 根据地址来查询
		List<CompanySearch> companySearchs = companySearchDao.companySearchsAddress(name);
		System.out.println("搜索企业信息根据地址来查询-------------" + companySearchs);
		return companySearchs;

	}
	
	@Autowired
	private CompanySearchService componySearchService;
	
	/**
	 * 查询基金列表  基金写入  solr
	 * @return
	 */
	@RequestMapping("/importall")
	@ResponseBody
	public CommonResponseVO  importAll() {
		CommonResponseVO vo = new CommonResponseVO();
		try {
			componySearchService.importCompanyToIndex();
			vo.success("导入索引库成功！");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return vo;
	}
	
	
//	http://localhost:8083/search.html?q=""
	/**0manager/q
	 * 实现商品的搜索
	 */
	@RequestMapping(value = "/querySolr")
	@CrossOrigin(origins = "*", maxAge = 3600) // 使用于前端的跨域
	@ResponseBody
	public  CommonResponseVO search(@RequestParam(value = "kw") String queryString, @RequestParam(value = "page", defaultValue = "1") Integer page) {
		CommonResponseVO vo = new CommonResponseVO();
//		if (StringUtils.isBlank(queryString)) {
//			vo.fail("查询条件是必须的参数");
//			return vo;
//		}
		System.out.println("执行1 +  controllerStr : "+ queryString);
		SearchResult result = null;
		try {
			result = companySearchService.searcCompany(queryString, page);
			//查询成功
			System.out.println("查询后 list = :: "+ result);
			vo.setData(result);
			vo.success("查询成功！");
		} catch (Exception e) {
			e.printStackTrace(); 
			vo.fail("查询异常！");
		}
		
		return vo;
	}

}
